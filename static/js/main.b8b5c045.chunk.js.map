{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","_ref","movie","_jsxs","className","children","_jsx","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","setMovies","_useState","useState","_useState2","_slicedToArray","query","setQuery","_useState3","_useState4","setMovie","_useState5","_useState6","isNotFound","setIsNotFound","_useState7","_useState8","loading","setLoading","_Fragment","onSubmit","event","preventDefault","fetch","concat","then","res","json","catch","Response","Error","getMovie","trim","toLowerCase","response","Object","hasOwn","_ref2","Title","Plot","Poster","imdbID","newMovie","finally","htmlFor","type","id","placeholder","value","onChange","target","disabled","onClick","some","film","_toConsumableArray","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b8b5c045.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport { getMovie } from '../../api';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\nimport { ResponseError } from '../../types/ReponseError';\nimport { MovieData } from '../../types/MovieData';\n\ntype Props = {\n  movies: Movie[],\n  setMovies: (movies: Movie[]) => void;\n};\n\nexport const FindMovie: React.FC<Props> = ({ movies, setMovies }) => {\n  const [query, setQuery] = useState('');\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [isNotFound, setIsNotFound] = useState<ResponseError | null>(null);\n  const [loading, setLoading] = useState(false);\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n\n    if (isNotFound) {\n      setIsNotFound(null);\n    }\n  };\n\n  const handleSubmitForm = (event: React.FormEvent) => {\n    event.preventDefault();\n    setLoading(true);\n\n    if (query) {\n      const trimmedQuery = query.trim().toLowerCase();\n\n      getMovie(trimmedQuery)\n        .then((response) => {\n          if (Object.hasOwn(response, 'Title')) {\n            const {\n              Title, Plot, Poster, imdbID,\n            } = response as MovieData;\n\n            const imgUrl\n            = Poster === 'N/A'\n              ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n              : Poster;\n\n            const newMovie = {\n              title: Title,\n              description: Plot,\n              imgUrl,\n              imdbUrl: `https://www.imdb.com/title/${imdbID}`,\n              imdbId: imdbID,\n            };\n\n            setMovie(newMovie);\n            setIsNotFound(null);\n          }\n\n          if (Object.hasOwn(response, 'Error')) {\n            setIsNotFound(response as ResponseError);\n          }\n        })\n        .finally(() => setLoading(false));\n    }\n  };\n\n  const handleListAdd = () => {\n    const inTheList = movies.some((film) => film.imdbId === movie?.imdbId);\n\n    if (!inTheList && movie) {\n      setMovies([\n        ...movies,\n        movie,\n      ]);\n    }\n\n    setIsNotFound(null);\n    setMovie(null);\n    setQuery('');\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={handleSubmitForm}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={`input ${isNotFound && 'is-danger'}`}\n              value={query}\n              onChange={handleQueryChange}\n            />\n          </div>\n\n          {isNotFound?.Error && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;ot find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={`button is-light ${loading && 'is-loading'}`}\n              disabled={!query}\n            >\n              Find a movie\n            </button>\n          </div>\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleListAdd}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=e183df43';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie movies={movies} setMovies={setMovies} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}